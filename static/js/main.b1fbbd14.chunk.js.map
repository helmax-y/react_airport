{"version":3,"sources":["helpers/composeDate.js","components/DateSelect.js","components/Flight.js","components/FlightsTable.js","api/getFlights.js","App.js","index.js"],"names":["composeDate","n","arguments","length","undefined","date","Date","setDate","getDate","dd","toString","concat","mm","getMonth","getFullYear","DateSelect","today","yesterday","tomorrow","location","useLocation","history","useHistory","searchParams","URLSearchParams","search","react_default","a","createElement","value","get","onChange","event","target","set","push","Flight","_ref","_ref$flight","flight","term","gate","gateNo","_ref$flight$actual","actual","_ref$flight$timeArrSh","timeArrShedule","destination","from","airline","en","name","flightNo","fltNo","status","TableRow","className","TableCell","pathname","slice","FlightsTable","direction","_useState","useState","_useState2","Object","slicedToArray","flights","setFlights","useEffect","reversedDate","split","reverse","join","fetch","then","response","json","getFlights","data","body","filter","includes","TableContainer","component","Paper","Table","TableHead","map","title","key","TableBody","components_Flight","ID","App","react_router_dom","to","components_DateSelect","react_router","path","render","components_FlightsTable","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b1fbbd14.chunk.js","sourcesContent":["export default (n = 0) => {\n  const date = new Date();\n\n  date.setDate(date.getDate() + n);\n\n  let dd = date.getDate().toString();\n\n  if (dd.length === 1) {\n    dd = `0${dd}`;\n  }\n\n  let mm = (date.getMonth() + 1).toString();\n\n  if (mm.length === 1) {\n    mm = `0${mm}`;\n  }\n\n  return `${dd}-${mm}-${date.getFullYear()}`;\n};\n","import React from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport composeDate from '../helpers/composeDate';\n\nconst DateSelect = () => {\n  const today = composeDate();\n  const yesterday = composeDate(-1);\n  const tomorrow = composeDate(1);\n\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n\n  const setDate = (date) => {\n    searchParams.set('date', date);\n    history.push({ search: searchParams.toString() });\n  };\n\n  return (\n    <select\n      value={searchParams.get('date')}\n      onChange={event => setDate(event.target.value)}\n    >\n      <option value={yesterday}>\n        Yesterday\n        {' '}\n        {yesterday}\n      </option>\n      <option value={today}>\n        Today\n        {' '}\n        {today}\n      </option>\n      <option value={tomorrow}>\n        Tomorrow\n        {' '}\n        {tomorrow}\n      </option>\n    </select>\n  );\n};\n\nexport default DateSelect;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\n\nconst Flight = ({ flight: {\n  term,\n  gateNo: gate,\n  actual = '',\n  timeArrShedule = '',\n  'airportToID.city_en': destination,\n  'airportFromID.city_en': from,\n  airline: { en: { name: airline } },\n  fltNo: flightNo,\n  status,\n} }) => {\n  const location = useLocation();\n\n  return (\n    <TableRow className=\"row\">\n      <TableCell>{term}</TableCell>\n      <TableCell>\n        {location.pathname === '/arrivals'\n          ? timeArrShedule.slice(11, 16)\n          : gate}\n      </TableCell>\n      <TableCell>{actual.slice(11, 16)}</TableCell>\n      <TableCell>\n        {location.pathname === '/arrivals' ? from : destination}\n      </TableCell>\n      <TableCell>{airline}</TableCell>\n      <TableCell>{flightNo}</TableCell>\n      <TableCell>{status}</TableCell>\n    </TableRow>\n  );\n};\n\nFlight.propTypes = { flight: PropTypes.shape({\n  term: PropTypes.string,\n  gate: PropTypes.string,\n  actual: PropTypes.string,\n  timeArrShedule: PropTypes.string,\n  'airportToID.city_en': PropTypes.string,\n  'airportFromID.city_en': PropTypes.string,\n  fltNo: PropTypes.string,\n  status: PropTypes.string,\n}).isRequired };\n\nexport default Flight;\n","import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport getFlights from '../api/getFlights';\nimport Flight from './Flight';\n\nconst FlightsTable = ({ direction, date }) => {\n  const [flights, setFlights] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    const reversedDate = date.split('-').reverse().join('-');\n\n    getFlights(date)\n      .then((data) => {\n        setFlights(data.body[direction]\n          .filter(flight => flight.actual.includes(reversedDate)));\n      });\n  }, [direction, date]);\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {[\n              'Terminal',\n              location.pathname === '/arrivals' ? 'Takeoff Time' : 'Gate',\n              location.pathname === '/arrivals'\n                ? 'Landing Time'\n                : 'Takeoff Time',\n              location.pathname === '/arrivals' ? 'From' : 'Destination',\n              'Airline',\n              'Flight #',\n              'Status',\n            ].map(title => (\n              <TableCell key={title}>{title}</TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n\n        <TableBody>\n          {flights.map(flight => (\n            <Flight key={flight.ID} flight={flight} />\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nFlightsTable.propTypes = {\n  direction: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n};\n\nexport default FlightsTable;\n","const URL = 'https://api.iev.aero/api/flights/';\n\nexport default date => fetch(URL + date)\n  .then(response => response.json());\n","import React, { useEffect } from 'react';\nimport {\n  Route,\n  NavLink,\n  Switch,\n  useHistory,\n  useLocation,\n} from 'react-router-dom';\n\nimport './style.scss';\nimport DateSelect from './components/DateSelect';\nimport FlightsTable from './components/FlightsTable';\nimport composeDate from './helpers/composeDate';\n\nconst App = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  useEffect(() => {\n    searchParams.set('date', composeDate());\n    history.push({\n      pathname: '/departures',\n      search: searchParams.toString(),\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h3>Kyiv Sikorsky Airport - Flight Schedule</h3>\n      <header>\n        <nav>\n          <NavLink\n            to={{\n              pathname: '/departures',\n              search: location.search,\n            }}\n          >\n            Departures\n          </NavLink>\n\n          <NavLink\n            to={{\n              pathname: '/arrivals',\n              search: location.search,\n            }}\n          >\n            Arrivals\n          </NavLink>\n        </nav>\n\n        <DateSelect />\n      </header>\n\n      <Switch>\n        <Route\n          path=\"/departures\"\n          render={() => (\n            <FlightsTable\n              direction=\"departure\"\n              date={searchParams.get('date')}\n            />\n          )}\n        />\n        <Route\n          path=\"/arrivals\"\n          render={() => (\n            <FlightsTable\n              direction=\"arrival\"\n              date={searchParams.get('date')}\n            />\n          )}\n        />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}